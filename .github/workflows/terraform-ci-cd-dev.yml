name: 'Terraform CI/CD (Dev) For Data Lake'

on:
  push:
    branches:
      - develop # Trigger on pushes to the develop branch
    paths:
      - 'modules/**'
      - 'environments/dev/**' # Focus on dev environment changes
      - '.github/workflows/terraform-ci-cd-dev.yml' # Trigger if the workflow file changes
  pull_request:
    branches:
      - develop # Trigger on PRs to the develop branch
    paths:
      - 'modules/**'
      - 'environments/dev/**'
      - '.github/workflows/terraform-ci-cd-dev.yml'

env:
  AWS_REGION: us-east-1 # Set your desired AWS region
  TF_ENV_DIR: 'environments/dev'
  TF_VAR_FILE: 'dev.tfvars' # Assuming your var file is named terraform.tfvars in the env dir

jobs:
  terraform: # Single job for dev environment workflow
    name: 'Terraform Plan and Apply (Dev)'
    runs-on: ubuntu-latest
    environment: dev # Link to GitHub environment for secrets and protection rules

    # Add permissions for OIDC
    permissions:
      id-token: write # This is required for requesting the OIDC token
      contents: read # This is required for checking out the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~1.5.0' # Match your versions.tf

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::713881790611:role/GitHubActionsTerraformRole-dev # Replace with your IAM Role ARN
          role-session-name: GitHubActionsTerraformSession
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt check
        run: terraform fmt -check -diff ./environments/dev

      - name: Terraform Init
        id: init
        working-directory: ./environments/dev
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_DEV }}" -backend-config="key=data-lake/dev/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE_DEV }}"

      - name: Terraform Validate
        id: validate
        working-directory: ./environments/dev
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./environments/dev
        run: terraform plan -no-color -input=false -var-file=${{ env.TF_VAR_FILE }} -out=tfplan

      # Apply changes only on pushes to the 'develop' branch
      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        working-directory: ./environments/dev
        run: terraform apply -auto-approve -input=false tfplan # Apply the plan generated in the previous step